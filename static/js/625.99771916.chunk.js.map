{"version":3,"file":"static/js/625.99771916.chunk.js","mappings":"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","sources":["components/FormPhoneBook/FormPhoneBook.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.js","Pages/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nimport { Formik, Form, Field } from 'formik';\n\nconst InputFieldLabel = styled.label`\n    display: block;\n    margin-bottom: 5px;\n`;\n\nconst SubmitButton = styled.button`\n      display: block;\n      cursor: pointer;\n      box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nconst InputField = styled(Field)`\n    display: block;\n    margin-bottom: 15px;\n\n`;\n\nexport function FormPhoneBook({ handleSubmit}){\n    let initialValues = {\n     name: '',\n     number: ''\n    }\n        return (\n            <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n            <Form autoComplete=\"off\">\n                <InputFieldLabel htmlFor=\"name\">Name</InputFieldLabel>\n                <InputField\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n                <InputFieldLabel htmlFor=\"number\">Phone</InputFieldLabel>\n                 <InputField\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n                <SubmitButton type=\"submit\">Add contact</SubmitButton>\n            </Form>    \n            </Formik>\n        );\n}","import styled from 'styled-components';\n\nconst ListItem = styled.li`\n    display: flex;\n    align-items: center;\n`;\n\nconst ButtonDelete = styled.button`\n    height: 20px;\n    margin-left: 10px;\n    color: red;\n    cursor: pointer;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\nexport function ContactList({ listData, delContact }){\n        return (\n            <ul>\n                {listData.map(e => {\n                return (\n                    <ListItem key={e.id}>\n                        <p>{e.name}: {e.number}</p>\n                        <ButtonDelete type=\"button\" onClick={()=> delContact(e.id)}>Delete</ButtonDelete>\n                    </ListItem>\n                );\n                })}\n            </ul>\n        );\n}","import React from \"react\";\nimport styled from 'styled-components';\n\nconst Label = styled.label`\n    display: block;\n    margin-bottom: 10px;\n`;\n\nexport function Filter({ value, onChange }){\n        return (\n        <>\n            <Label htmlFor=\"filter\">Find contacts by name</Label>\n            <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n        </>\n        );\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { FormPhoneBook } from 'components/FormPhoneBook/FormPhoneBook';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { setFilter } from 'redux/filterSlice';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contacts/contactsOperations';\nimport { useEffect } from 'react';\n\nconst BoxApp = styled.div`\n  padding: 20px;\n`;\n\nexport function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contactsData.contacts.items);\n  const filter = useSelector(state => state.filter.filter);\n  const isLoading = useSelector(state => state.contactsData.contacts.isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleSubmit = (value, { resetForm }) => {\n    const { name, number } = value;\n    const contact = {\n      name,\n      number,\n    };\n\n    if (isContact(name)) {\n      alert(`${name} is alredy in contact.`);\n      return;\n    }\n\n    dispatch(addContact(contact));\n    resetForm();\n  };\n\n  const isContact = name => {\n    const normalizeName = name.toLowerCase();\n    return contacts.find(\n      contact => contact.name.toLowerCase() === normalizeName\n    );\n  };\n\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  const getVisibleContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  const delContact = id => {\n    dispatch(deleteContact(id));\n    return;\n  };\n\n  return (\n    <BoxApp>\n      <h2>Phonebook</h2>\n      <FormPhoneBook handleSubmit={handleSubmit} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={onChangeFilter} />\n      {isLoading ? (\n        'Loading, please wait...'\n      ) : (\n        <ContactList listData={getVisibleContacts()} delContact={delContact} />\n      )}\n    </BoxApp>\n  );\n}\n","import { Contacts } from 'components/Contacts/Contacts';\n\nfunction ContactsPage() {\n  return (\n    <div>\n      <Contacts />\n    </div>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["InputFieldLabel","styled","SubmitButton","InputField","Field","FormPhoneBook","handleSubmit","initialValues","name","number","onSubmit","autoComplete","htmlFor","type","pattern","title","required","ListItem","ButtonDelete","ContactList","listData","delContact","map","e","onClick","id","Label","Filter","value","onChange","BoxApp","Contacts","dispatch","useDispatch","contacts","useSelector","state","contactsData","items","filter","isLoading","useEffect","fetchContacts","isContact","normalizeName","toLowerCase","find","contact","resetForm","alert","addContact","setFilter","currentTarget","normalizeFilter","includes","getVisibleContacts","deleteContact"],"sourceRoot":""}